// Generated by gencpp from file turtlebot_action_server/burger_moveFeedback.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_ACTION_SERVER_MESSAGE_BURGER_MOVEFEEDBACK_H
#define TURTLEBOT_ACTION_SERVER_MESSAGE_BURGER_MOVEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot_action_server
{
template <class ContainerAllocator>
struct burger_moveFeedback_
{
  typedef burger_moveFeedback_<ContainerAllocator> Type;

  burger_moveFeedback_()
    : step_distance()
    , request_id(0)  {
    }
  burger_moveFeedback_(const ContainerAllocator& _alloc)
    : step_distance(_alloc)
    , request_id(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _step_distance_type;
  _step_distance_type step_distance;

   typedef int32_t _request_id_type;
  _request_id_type request_id;





  typedef boost::shared_ptr< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct burger_moveFeedback_

typedef ::turtlebot_action_server::burger_moveFeedback_<std::allocator<void> > burger_moveFeedback;

typedef boost::shared_ptr< ::turtlebot_action_server::burger_moveFeedback > burger_moveFeedbackPtr;
typedef boost::shared_ptr< ::turtlebot_action_server::burger_moveFeedback const> burger_moveFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator1> & lhs, const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.step_distance == rhs.step_distance &&
    lhs.request_id == rhs.request_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator1> & lhs, const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot_action_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e6f64e714e98d3c4b20d9309a22a790";
  }

  static const char* value(const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e6f64e714e98d3cULL;
  static const uint64_t static_value2 = 0x4b20d9309a22a790ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_action_server/burger_moveFeedback";
  }

  static const char* value(const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"int32[] step_distance\n"
"int32 request_id\n"
"\n"
"\n"
;
  }

  static const char* value(const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_distance);
      stream.next(m.request_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct burger_moveFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_action_server::burger_moveFeedback_<ContainerAllocator>& v)
  {
    s << indent << "step_distance[]" << std::endl;
    for (size_t i = 0; i < v.step_distance.size(); ++i)
    {
      s << indent << "  step_distance[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.step_distance[i]);
    }
    s << indent << "request_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_ACTION_SERVER_MESSAGE_BURGER_MOVEFEEDBACK_H
