// Generated by gencpp from file burger_move_action/Burger_moveGoal.msg
// DO NOT EDIT!


#ifndef BURGER_MOVE_ACTION_MESSAGE_BURGER_MOVEGOAL_H
#define BURGER_MOVE_ACTION_MESSAGE_BURGER_MOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace burger_move_action
{
template <class ContainerAllocator>
struct Burger_moveGoal_
{
  typedef Burger_moveGoal_<ContainerAllocator> Type;

  Burger_moveGoal_()
    : distance(0)
    , direction()
    , request_id(0)  {
    }
  Burger_moveGoal_(const ContainerAllocator& _alloc)
    : distance(0)
    , direction(_alloc)
    , request_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  _direction_type direction;

   typedef int32_t _request_id_type;
  _request_id_type request_id;





  typedef boost::shared_ptr< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct Burger_moveGoal_

typedef ::burger_move_action::Burger_moveGoal_<std::allocator<void> > Burger_moveGoal;

typedef boost::shared_ptr< ::burger_move_action::Burger_moveGoal > Burger_moveGoalPtr;
typedef boost::shared_ptr< ::burger_move_action::Burger_moveGoal const> Burger_moveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::burger_move_action::Burger_moveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::burger_move_action::Burger_moveGoal_<ContainerAllocator1> & lhs, const ::burger_move_action::Burger_moveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.direction == rhs.direction &&
    lhs.request_id == rhs.request_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::burger_move_action::Burger_moveGoal_<ContainerAllocator1> & lhs, const ::burger_move_action::Burger_moveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace burger_move_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1de0c91feefe3009e76de19337cbc8a0";
  }

  static const char* value(const ::burger_move_action::Burger_moveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1de0c91feefe3009ULL;
  static const uint64_t static_value2 = 0xe76de19337cbc8a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "burger_move_action/Burger_moveGoal";
  }

  static const char* value(const ::burger_move_action::Burger_moveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"int32 distance\n"
"string direction\n"
"int32 request_id\n"
;
  }

  static const char* value(const ::burger_move_action::Burger_moveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.direction);
      stream.next(m.request_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Burger_moveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::burger_move_action::Burger_moveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::burger_move_action::Burger_moveGoal_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "request_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BURGER_MOVE_ACTION_MESSAGE_BURGER_MOVEGOAL_H
