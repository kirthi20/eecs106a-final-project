;; Auto-generated. Do not edit!


(when (boundp 'face_detector::FaceDetectorResult)
  (if (not (find-package "FACE_DETECTOR"))
    (make-package "FACE_DETECTOR"))
  (shadow 'FaceDetectorResult (find-package "FACE_DETECTOR")))
(unless (find-package "FACE_DETECTOR::FACEDETECTORRESULT")
  (make-package "FACE_DETECTOR::FACEDETECTORRESULT"))

(in-package "ROS")
;;//! \htmlinclude FaceDetectorResult.msg.html
(if (not (find-package "PEOPLE_MSGS"))
  (ros::roseus-add-msgs "people_msgs"))


(defclass face_detector::FaceDetectorResult
  :super ros::object
  :slots (_face_positions ))

(defmethod face_detector::FaceDetectorResult
  (:init
   (&key
    ((:face_positions __face_positions) ())
    )
   (send-super :init)
   (setq _face_positions __face_positions)
   self)
  (:face_positions
   (&rest __face_positions)
   (if (keywordp (car __face_positions))
       (send* _face_positions __face_positions)
     (progn
       (if __face_positions (setq _face_positions (car __face_positions)))
       _face_positions)))
  (:serialization-length
   ()
   (+
    ;; people_msgs/PositionMeasurement[] _face_positions
    (apply #'+ (send-all _face_positions :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; people_msgs/PositionMeasurement[] _face_positions
     (write-long (length _face_positions) s)
     (dolist (elem _face_positions)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; people_msgs/PositionMeasurement[] _face_positions
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _face_positions (let (r) (dotimes (i n) (push (instance people_msgs::PositionMeasurement :init) r)) r))
     (dolist (elem- _face_positions)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get face_detector::FaceDetectorResult :md5sum-) "b5dc843df183dbab7f0ab2f5ef5b6f9d")
(setf (get face_detector::FaceDetectorResult :datatype-) "face_detector/FaceDetectorResult")
(setf (get face_detector::FaceDetectorResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result
people_msgs/PositionMeasurement[] face_positions

================================================================================
MSG: people_msgs/PositionMeasurement
std_msgs/Header     header
# The name of the detector that detected the person (i.e frontalface, profileface)
string              name
string              object_id
geometry_msgs/Point pos
float64             reliability
float64[9]          covariance
byte                initialization


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

")



(provide :face_detector/FaceDetectorResult "b5dc843df183dbab7f0ab2f5ef5b6f9d")


